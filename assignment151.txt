CREATE TABLE student (
    rollno NUMBER(10) PRIMARY KEY,
    name VARCHAR2(100),
    std VARCHAR2(10),
    dob DATE,
    fee NUMBER(10, 2)
);
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class assignment151 {
    // JDBC URL for Oracle database
    static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:ORCL";

    // Database credentials
    static final String USER = "hr";
    static final String PASS = "hr";

    public static void main(String[] args) {
        // Check for the correct number of command-line arguments
        if (args.length != 2) {
            System.out.println("Usage: java assignment151 <rollno> <new_fee_amount>");
            return;
        }

        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            // Parse the roll number and new fee from command-line arguments
            int rollno = Integer.parseInt(args);
            double newFee = Double.parseDouble(args);

            System.out.println("Connecting to database...");
            // Establish a connection to the database
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Connection established successfully.");

            // SQL statement to update the fee for a specific student
            String sql = "UPDATE student SET fee = ? WHERE rollno = ?";
            pstmt = conn.prepareStatement(sql);

            // Bind the values to the prepared statement
            pstmt.setDouble(1, newFee);
            pstmt.setInt(2, rollno);

            System.out.println("Updating student record for rollno: " + rollno);
            int rowsAffected = pstmt.executeUpdate();
            
            if (rowsAffected > 0) {
                System.out.println("Student record updated successfully. Rows affected: " + rowsAffected);
            } else {
                System.out.println("No student found with roll number: " + rollno + ". No records were updated.");
            }

        } catch (NumberFormatException e) {
            System.err.println("Invalid input format. Please provide an integer for rollno and a number for fee.");
        } catch (SQLException se) {
            // Handle errors for JDBC
            System.err.println("A database error occurred: " + se.getMessage());
        } finally {
            // Close resources in a finally block to ensure they are always closed
            try {
                if (pstmt != null) pstmt.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
            try {
                if (conn != null) conn.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }
}
